{
	"info": {
		"_postman_id": "73f50a15-7fc9-4180-a886-59f78af8f455",
		"name": "postman_dz_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28833626"
	},
	"item": [
		{
			"name": "ep_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"test1\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"//var body_test1 = parse(pm.request.response)\r",
							"//console.log(\"body_test ==\" body_test1, typeof)\r",
							"\r",
							"pm.test(\"test2\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(typeof\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"// console.log(typeof pm.response.pretty);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" var jsonData = pm.response.json();\r",
							"//Проверить, что name в ответе равно name s request\r",
							"pm.test(\"name_1\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"vlad\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request\r",
							"pm.test(\"age_1\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"27\");\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"salary_1\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"// // Спарсить request.\r",
							"var jsonData = pm.response.json()\r",
							"let reg_body = request.data\r",
							"var reg_name = reg_body.name\r",
							"console.log(reg_name)\r",
							"//Проверить, что name в ответе равно name s request \r",
							"pm.test(\"name_2\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reg_name)})\r",
							"//Проверить, что age в ответе равно age s request\r",
							"var reg_age = reg_body.age\r",
							"console.log(reg_age)\r",
							"pm.test(\"age_2\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reg_age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"var reg_salary = reg_body.salary\r",
							"console.log(reg_salary)\r",
							"pm.test(\"salary_2\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reg_salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"var out_family = jsonData.family\r",
							"console.log(\"family\", out_family)\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var out_family = jsonData.family\r",
							"var reg_u_salary = out_family.u_salary_1_5_year\r",
							"console.log(\"u_salary_1_5_year\", reg_u_salary)\r",
							"var new_1 = jsonData.salary\r",
							"pm.test (\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(new_1 * 4).to.eql(reg_u_salary);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "vlad",
							"type": "text"
						},
						{
							"key": "{{sam}}",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp_data = pm.response.json()\r",
							"console.log(\"Спарсить response body в json.\", resp_data)\r",
							"//Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject()\r",
							"console.log(\"Спарсить request=\", req_data)\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var u_name = resp_data.name\r",
							"// console.log(u_name)  Проверка\r",
							"var r_name = req_data.name\r",
							"// console.log(r_name) Проверка\r",
							"pm.test(\"name_1\", function(){\r",
							"    pm.expect(u_name).to.eql(r_name);\r",
							"})\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var u_name = resp_data.age\r",
							"var r_name = req_data.age\r",
							"pm.test(\"age_1\", function(){\r",
							"    pm.expect(u_name).to.eql(r_name);\r",
							"})\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var u_name = resp_data.salary\r",
							"var r_name = req_data.salary\r",
							"pm.test(\"salary_1\", function(){\r",
							"    pm.expect(u_name).to.eql(+r_name);\r",
							"})\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(\"Параметр family из response\", resp_data.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_test_name\", function(){\r",
							"  pm.expect(resp_data.family.pets.dog).have.property('name');\r",
							"})\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_test_age\", function(){\r",
							"  pm.expect(resp_data.family.pets.dog).have.property('age');\r",
							"})\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_test_Lucky\", function(){\r",
							"    pm.expect(resp_data.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_test_age_4\", function(){\r",
							"    pm.expect(resp_data.family.pets.dog.age).to.eql(4)})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=vlad&age=27&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "vlad"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// //Отправить запрос.\r",
							"// pm.sendRequest(\"http://162.55.220.72:5005/object_info_4\" , function () {\r",
							"//     console.log(pm.response.json());\r",
							"// });\r",
							"// // Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"// // Спарсить response body в json.\r",
							"var response_data = pm.response.json()\r",
							"console.log(response_data) \r",
							"\r",
							"// Спарсить request.\r",
							"var request_data = pm.request.url.query.toObject()\r",
							"console.log(request_data)\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = request_data.name;\r",
							"// console.log(req_name)\r",
							"pm.test(\"name_1\", function () {\r",
							"    pm.expect(response_data.name).to.eql(req_name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var req_age = request_data.age;\r",
							"pm.test(\"age_1\", function () {\r",
							"     pm.expect(response_data.age).to.eql(+req_age);\r",
							"});\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary_request = \"+pm.request.url.query.toObject().salary)\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary_response = \"+pm.response.json().salary)\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"salary_response = \"+pm.response.json().salary[0])\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary_response = \"+pm.response.json().salary[1])\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary_response = \"+pm.response.json().salary[2])\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var req_salary = request_data.salary;\r",
							"pm.test(\"salary_0\", function () {\r",
							"     pm.expect(response_data.salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var req_salary = request_data.salary;\r",
							"pm.test(\"salary_1\", function () {\r",
							"     pm.expect(+response_data.salary[1]).to.eql(req_salary * 2);\r",
							"});\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var req_salary = request_data.salary;\r",
							"pm.test(\"salary_2\", function () {\r",
							"     pm.expect(+response_data.salary[2]).to.eql(+req_salary * 3);\r",
							"});\r",
							"// Создать в окружении переменную name\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"var new_name = JSON.parse(responseBody);\r",
							"pm.environment.set(\"name\", pm.response.json().name);\r",
							"// Передать в окружение переменную age\r",
							"var new_name = JSON.parse(responseBody);\r",
							"pm.environment.set(\"age\", pm.response.json().age);\r",
							"// Передать в окружение переменную salary\r",
							"var new_name = JSON.parse(responseBody);\r",
							"pm.environment.set(\"salary\", pm.response.json().salary[0]);\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var i;\r",
							"for (i=0; i<=2; i++){\r",
							"    console.log(environment.salary[i])}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=vlad&age=27&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "vlad"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp_data = pm.response.json()\r",
							"// console.log(resp_data)\r",
							"// Спарсить request.\r",
							"var req_data = request.data\r",
							"// console.log(req_data)\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json_start_qa_salary\", function(){\r",
							"    pm.expect(resp_data).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json_start_qa_salary_6m\", function(){\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json_start_qa_salary_12m\", function(){\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json_start_qa_salary_1.5\", function(){\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json_start_qa_salary_3.5\", function(){\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_3.5_years\")})\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function(){\r",
							"    pm.expect(resp_data).to.have.property(\"person\")})\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary_1\", function () {\r",
							"    var reg_salary_1 =req_data.salary\r",
							"    pm.expect(pm.response.json().start_qa_salary).to.eql(+reg_salary_1);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary_after_6\", function () {\r",
							"    var reg_salary_1 =req_data.salary\r",
							"    pm.expect(pm.response.json().qa_salary_after_6_months).to.eql(+reg_salary_1 * 2);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary_after_12\", function () {\r",
							"    var reg_salary_1 =req_data.salary\r",
							"    pm.expect(pm.response.json().qa_salary_after_12_months).to.eql(+reg_salary_1 * 2.7);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary_after_1.5\", function () {\r",
							"    var reg_salary_1 =req_data.salary\r",
							"    pm.expect(pm.response.json()[\"qa_salary_after_1.5_year\"]).to.eql(+reg_salary_1 * 3.3);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary_after_12\", function () {\r",
							"    var reg_salary_1 =req_data.salary\r",
							"    pm.expect(pm.response.json().qa_salary_after_12_months).to.eql(+reg_salary_1 * 2.7);\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person\", function () {\r",
							"    var req_salary_1 = request.data.salary\r",
							"    pm.expect(pm.response.json().person.u_name[1]).eql(+req_salary_1);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"age\", function () {\r",
							"    var req_age_1 = request.data.age\r",
							"    pm.expect(pm.response.json().person.u_age).eql(+req_age_1);\r",
							"});\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"    var req_salary_2 = request.data.salary\r",
							"    pm.expect(pm.response.json().person.u_salary_5_years).eql(req_salary_2*4.2);\r",
							"});\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var new_person = Object.values(pm.response.json().person)\r",
							"var i;\r",
							"for (i = 0; i <= 2; i++) {\r",
							"    if (typeof new_person[i] == \"object\") {\r",
							"        // console.log(\"====\", new_person[i])\r",
							"        for (var arr_item of new_person[i]) {\r",
							"            if (typeof arr_item !== \"object\") {\r",
							"                console.log(arr_item)\r",
							"            }\r",
							"        }\r",
							"    } else {\r",
							"        console.log(new_person[i])\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}